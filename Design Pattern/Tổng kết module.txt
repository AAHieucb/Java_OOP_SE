Design pattern:


#***Đầy đủ singleton pattern trong java:
Singleton Pattern hạn chế việc khởi tạo 1 class, cung cấp 1 điểm truy cập toàn cục cho lớp. Chính singleton pattern cũng được sử dụng trong các pattern khác như Abstract Factory, Builder,..
Triển khai: dùng private constructor của class để đảm bảo class khác k thể truy cập vào constructor và tạo instance mới; tạo 1 biến private static để đảm bảo duy nhất dùng trong class đó thôi; Để các class khác truy cập vào global instance này thì cần 1 public static method trả về giá trị của private instance.

Nhiều cách triển khai:
-> Eager initialization
-> Static block initialization
-> Lazy initialization
-> Thread safe initialization

-> Bill pugh singleton:
Trong code thực tế, static variable được JVM khởi tạo khi: ta tạo 1 instance của class đó hoặc dùng đến static var của class đó. Code static block cũng được chạy static var được tạo. Còn static nested class thì đặc biệt hơn là chỉ khi nào dùng đến thì mới chạy.
=> Nested static class là class static được định nghĩa trong 1 class khác. Do nó là định nghĩa nên khi gặp sẽ k chạy ngay vì ta đâu có tạo 1 instance hay dùng static của nó đâu nên biến static ở trong static class vẫn k được khai báo ngay

Private class cx cần có constructor vì cx k khởi tạo được instance bên ngoài. Private static class định nghĩa trong phạm vi class thì chỉ dùng được trong phạm vi class đó.

-> Dùng Reflection để hủy singleton pattern
-> Dùng Singleton với Serialization



#***Strategy pattern basic
Vấn đề nó giải quyết là khi có 1 tập hợp các thuật toán, mỗi thuật toán là 1 strategy khác nhau và ở các TH khác nhau, client sẽ tự chọn ra strategy để dùng.

Client có hàng loạt các strategy dependency tạo ra trong hàm, Client truyền nó vào context aggregation và gọi context.doSomething thì strategy sẽ execute. Context có biến interface strategy, các strategy sẽ implements interface đó. Muốn thêm strategy mới thì cứ thêm class miễn implements đúng cái interface kia.

Trong dự án ta dùng k đúng vai trò của context nên bỏ nó đi vẫn được. Context ở đây tên của nó k đúng là context mà phải là 1 object gì đó trong đời sống. VD: Order aggregation đến PayStrategy. Khi đó Context ở đây chính là order, Order nó sẽ làm nhiều vc hơn là chỉ forward đúng 1 hàm của PayStrategy vì nó là 1 object thực tiễn là lưu thông tin và các hàm thao tác với order nên có thể có totalCost, getTotalCost,...

VD: Game street fighter có 3 nhân vật khác nhau, mỗi nhân vật có vài thuộc tính cùng giá trị(khi đổi nhân vật trong funtime) nhưng cũng có vài thuộc tính và phương thức khác nhau. Làm sao để thay đổi nhân vật khác lúc run time mà các tính chất chung vẫn giữ nguyên
Cách làm thiếu strategy pattern: Lớp fighter là lớp cơ sở của 3 lớp nhân vật: A, B, C chứa các thuộc tính chung. Nó là abstract class và A, B, C implement các hàm của nó nếu có chung.
Khi dùng Fighter f = new A(); Trong run time ta lại dùng là f = new B(); để đổi nhân vật thì mọi thuộc tính chung của A mà ta muốn move sang B sẽ mất.
=> Do đó nếu dùng thêm 1 thuộc tính nữa trong fighter là biến class Strategy lưu các thuộc tính cùng tên nhưng khác nhau ở mỗi lớp thì khi đổi nhân vật, ban đầu là f.strategy = new AStrategy(); thành f.strategy = new BStrategy(); là ok
Có thể cụ thể đén mức mỗi method riêng vì nhiều nhân vật có thể có cùng 1 kiểu đá, 1 vài số khác lại cùng 1 kiểu đá khác thì chơi kiểu KickFastStrategy(); KickSlowStrategy(); PunchStrategy1(); PunchLongStrategy2();
Nếu k tách riêng class cho tưng action thì có thể sẽ phải AKickFastStrategy, AKickSlowStrategy => có m * n class còn chia ra thì là m + n class
Thuộc về behavior nên thg dung cho kiểu hành vi thay đổi, ở đây nhưng đối tượng k đổi



# Prototype Pattern
1 class có 100 trường, ta muốn tạo ra 10 instance của class giống nhau 90 trường, chỉ khác có 10 trường còn lại, bao gồm cả kế thừa loạn xạ. Thay vì khởi tạo thủ công, ta sẽ có nhu cầu chỉ tạo 1 instance và clone ra 9 instance khác, sau đó chỉ sửa các giá trị khác nhau.
Nhiều TH khác cần clone 

Nếu k dùng design pattern này mà viết clone 1 object thì:
A a1 = new ...
A a2 = new A();
rồi gán từng trường a2 bằng a1 với a2.setData(a1.data);
=> Cách này thì các thuộc tính của a1 bị expose ra ngoài để a2 set, các cái private ta đâu có biết

Nếu dùng copy constructor cũng được:
A a2 = new A(a1);
a2.setOtherData(...);
nhưng nếu a1 sửa thì logic setOtherData phải đổi, và sửa nhiều chỗ => hiển nhiên mà

Prototype Pattern cung 1 cách thức clone tốt nhất:
Level1: là dùng hàm clone ngay trong A nhận biến kiểu A và gọi các hàm set bên trong sẽ đảm bảo tính đóng gói che dấu tốt
Level2: 1 lớp sẽ có quan hệ với lớp khác. VD A kế thừa B v thì nó phải clone mọi thứ của lớp cha. Như v là k tốt nên tạo ra clone ở mọi lớp r gọi super(clone()) là được. Còn lớp nào chỉ implement hàm clone các thuộc tính của riêng lớp đó thôi. VD trong các ngôn ngữ có sẵn interface Clonable đẻ mọi class implement đó
Mẫu này k dùng reflection, reflection làm mất tính che dấu đó.

TH clone recursive thì DP này k xủ lý được. A có B, B có A. Ta gọi clone của A thì nó gọi clone của this.b = a.b.clone() và trong B lại clone A thì k xử lý được.



# Template Pattern 
Dùng khi nhiều class có nhiều hàm tạo thành 1 quy trình chung là khung xương để hoàn thành công việc. Thì nhét vào abstract class. 
VD Student có goToSchool, Worker có goToCompany. Ta k tạo riêng mà gom chung là goToWork implement ở từng class r gọi từng cái 1. Đặt tên hàm ở class cha tổng quát hơn
VD:
public abstract class MessageSender {
   public void sendMessage(String recipient, String message) {
      connect();
      authenticate();
      sendMessageImpl(recipient, message);
      disconnect();
   }
   protected abstract void sendMessageImpl(String recipient, String message);
   private void connect() {
      System.out.println("Connecting...");
   }
   private void disconnect() {
      System.out.println("Disconnecting...");
   }
   private void authenticate() {
      System.out.println("Authenticating...");
   }
}
public class EmailMessageSender extends MessageSender {
   @Override
   protected void sendMessageImpl(String recipient, String message) {
      System.out.println("Sending email to " + recipient + ": " + message);
   }
}
public class SmsMessageSender extends MessageSender {
   @Override
   protected void sendMessageImpl(String recipient, String message) {
      System.out.println("Sending SMS to " + recipient + ": " + message);
   }
}
public class PushNotificationMessageSender extends MessageSender {
   @Override
   protected void sendMessageImpl(String recipient, String message) {
      System.out.println("Sending push notification to " + recipient + ": " + message);
   }
}
MessageSender emailSender = new EmailMessageSender();
emailSender.sendMessage("john@example.com", "Hello from Java!");
MessageSender smsSender = new SmsMessageSender();
smsSender.sendMessage("+1234567890", "Hello from Java!");
MessageSender pushNotificationSender = new PushNotificationMessageSender();
pushNotificationSender.sendMessage("jane@example.com", "Hello from Java!");
=> Dễ dang tạo ra 1 kiểu send message mới, chỉ cần đổi implementation



# Chain of Responsibility Pattern
Behaviral pattern mô tả việc dùng 1 chuỗi handler liên tiếp nhau để xử lý request
VD:
public interface DiscountHandler {
   double applyDiscount(Order order);
   void setNextHandler(DiscountHandler handler);
}
public class OnlineOrderDiscountHandler implements DiscountHandler {
   private DiscountHandler nextHandler;
   @Override
   public double applyDiscount(Order order) {
      if (order.getType() == OrderType.ONLINE && order.getAmount() > 100) {
         return order.getAmount() * 0.1; // 10% discount
      } else {
         return nextHandler.applyDiscount(order);
      }
   }
   @Override
   public void setNextHandler(DiscountHandler handler) {
      this.nextHandler = handler;
   }
}
public class PhoneOrderDiscountHandler implements DiscountHandler {
   private DiscountHandler nextHandler;
   @Override
   public double applyDiscount(Order order) {
      if (order.getType() == OrderType.PHONE && order.getAmount() > 50) {
         return order.getAmount() * 0.05; // 5% discount
      } else {
         return nextHandler.applyDiscount(order);
      }
   }
   @Override
   public void setNextHandler(DiscountHandler handler) {
      this.nextHandler = handler;
   }
}
public class DefaultDiscountHandler implements DiscountHandler {
   @Override
   public double applyDiscount(Order order) {
      return 0; // no discount
   }
   @Override
   public void setNextHandler(DiscountHandler handler) {
      // This is the last handler, so there is no next handler.
   }
}
DiscountHandler onlineOrderHandler = new OnlineOrderDiscountHandler();
DiscountHandler phoneOrderHandler = new PhoneOrderDiscountHandler();
DiscountHandler defaultHandler = new DefaultDiscountHandler();

onlineOrderHandler.setNextHandler(phoneOrderHandler);
phoneOrderHandler.setNextHandler(defaultHandler);

// Process orders
Order onlineOrder = new Order(OrderType.ONLINE, 150);
double onlineOrderDiscount = onlineOrderHandler.applyDiscount(onlineOrder);
System.out.println("Online order discount: " + onlineOrderDiscount);

Order phoneOrder = new Order(OrderType.PHONE, 75);
double phoneOrderDiscount = onlineOrderHandler.applyDiscount(phoneOrder);
System.out.println("Phone order discount: " + phoneOrderDiscount);

Order inPersonOrder = new Order(OrderType.IN_PERSON, 200);
double inPersonOrderDiscount = onlineOrderHandler.applyDiscount(inPersonOrder);
System.out.println("In-person order discount: " + inPersonOrderDiscount);

=> Thêm rules cho order, thêm handler vào chain thoải mái mà k modifier code cũ



# Facade Pattern
1 quy trình xảy ra gồm sự tham gia của nhiều subsystem (class) thì nên tạo 1 class chung chứa các subsystem để thực hiện quy trình đó.
VD:
public interface ComputerFacade {
   void start();
   void shutdown();
}
public class ComputerFacadeImpl implements ComputerFacade {
   private CPU cpu;
   private Memory memory;
   private HardDrive hardDrive;
   public ComputerFacadeImpl() {
      this.cpu = new CPU();
      this.memory = new Memory();
      this.hardDrive = new HardDrive();
   }
   @Override
   public void start() {
      cpu.freeze();
      memory.load(BOOT_ADDRESS, hardDrive.read(BOOT_SECTOR, SECTOR_SIZE));
      cpu.jump(BOOT_ADDRESS);
      cpu.execute();
   }
   @Override
   public void shutdown() {
      cpu.stop();
      memory.clear();
      hardDrive.flush();
   }
}
ComputerFacade computer = new ComputerFacadeImpl();
computer.start();
// Do some work...
computer.shutdown();
=> Luồng chính chạy quy trình nhiều lần với ComputerFacade được. Sửa quy trình thì chỉ sửa trong class đó thôi. Luồng chính k cần có biến CPU, Memory gì cả. Ẩn được sự phức tạp trên luồng chính, đưa nó vào duy nhất class ComputerFacade


